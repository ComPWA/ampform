# pylint: disable=import-error
# pyright: reportMissingImports=false
"""Abbreviated the annotations generated by sphinx-autodoc.

It's not necessary to generate the full path of type hints, because they are
rendered as clickable links.

See also https://github.com/sphinx-doc/sphinx/issues/5868.
"""

import sphinx.domains.python
from docutils import nodes
from sphinx import addnodes
from sphinx.environment import BuildEnvironment

__TARGET_SUBSTITUTIONS = {
    "sp.Expr": "sympy.core.expr.Expr",
    "sp.Symbol": "sympy.core.symbol.Symbol",
    "typing_extensions.Protocol": "typing.Protocol",
}


def new_type_to_xref(
    target: str, env: BuildEnvironment = None, suppress_prefix: bool = False
) -> addnodes.pending_xref:
    # pylint: disable=unused-argument
    """Convert a type string to a cross reference node."""
    if target == "None":
        reftype = "obj"
    else:
        reftype = "class"

    if env:
        kwargs = {
            "py:module": env.ref_context.get("py:module"),
            "py:class": env.ref_context.get("py:class"),
        }
    else:
        kwargs = {}

    target = __TARGET_SUBSTITUTIONS.get(target, target)
    short_text = target.split(".")[-1]

    return addnodes.pending_xref(
        "",
        nodes.Text(short_text),
        refdomain="py",
        reftype=reftype,
        reftarget=target,
        **kwargs,
    )


def abbreviate_signature() -> None:
    sphinx.domains.python.type_to_xref = new_type_to_xref
